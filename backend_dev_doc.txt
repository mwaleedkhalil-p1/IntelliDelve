IntelliDelve API Testing Guide
Using Postman Web
A Comprehensive Guide to Configuring and Testing the IntelliDelve API
Generated on August 4, 2025
For internal use only
Contents
1 Setup Instructions - Postman Web . . . . . . . . . . . . . . . . . . . . . . . . . . 2
1.1 Accessing Postman Web . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
2 Postman Web Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
3 Authentication Endpoints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
3.1 POST /api/auth/login/ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
3.2 GET /api/auth/validate/ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
4 Blog Endpoints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
4.1 GET /api/blogs/ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
4.2 POST /api/blogs/ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
4.3 GET /api/blogs/{uuid}/ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
4.4 PUT /api/blogs/{uuid}/ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
4.5 DELETE /api/blogs/{uuid}/ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
5 Case Study Endpoints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
5.1 GET /api/case-studies/ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
5.2 POST /api/case-studies/ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
5.3 GET/PUT/DELETE /api/case-studies/{uuid}/ . . . . . . . . . . . . . . . . . . 5
6 Features of the Current Setup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
7 Testing Tips in Postman Web . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
1
IntelliDelve API Testing Guide Page 2
1 Setup Instructions - Postman Web
This section outlines the steps to access and set up Postman Web for testing the IntelliDelve
API.
1.1 Accessing Postman Web
1. Visit: https://web.postman.co/
2. Sign in with your Postman account or create a new account.
3. Once logged in, access the Postman Web workspace.
2 Postman Web Configuration
Follow these steps to configure Postman Web for the IntelliDelve API.
1. In Postman Web, click ”Import” in the left sidebar.
2. Upload the file: intellidelve_postman_collection.json.
3. Set the Base URL to: https://informed-bluebird-right.ngrok-free.app/.
4. At the Collection level, go to the Authorization Tab:
• Type: Bearer Token
• Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNj
ZXNzIiwiZXhwIjoxNzU0MzM0Mjc5LCJpYXQiOjE3NTQyNDc4NzksImp0aSI6ImMzZDMz
MDM0NDY1MTQ2Y2Q4ZDUyZjgzYzAzNWUxNzBlIiwidXNlcl9pZCI6IjQifQ.XGhllI3f
JppsnxOzQJ5HDYwpr0miLmy8BUIp24wPi64
Note: The token is just for testing and is only available for 24 hours.
3 Authentication Endpoints
This section describes the endpoints for user authentication.
3.1 POST /api/auth/login/
Description: Authenticates a user and returns a JWT token.
Body (JSON):
{
"email": "shahmirkhan9181@gmail.com",
"password": "IntelliDelveIntern123@"
}
Response:
{
"success": true,
"data": {
"user": {
"id": "4",
"email": "shahmirkhan9181@gmail.com",
"name": "IntelliDelve",
"role": "editor",
"lastLogin": "2025-08-03T22:47:21.390028+00:00"
Confidential
IntelliDelve API Testing Guide Page 3
},
"token": {TOKEN}"
},
"message": "Login successful"
}
3.2 GET /api/auth/validate/
Description: Validates token and returns user information.
Headers:
• Authorization: Bearer <access_token>
Response:
{
"success": true,
"data": {
"user": {
"id": "4",
"email": "shahmirkhan9181@gmail.com",
"name": "",
"role": "editor"
}
}
}
4 Blog Endpoints
These endpoints manage blog posts in the IntelliDelve API.
4.1 GET /api/blogs/
Description: Fetches a paginated list of blog posts.
Query Parameters:
• page (int, optional): Page number for pagination.
• search (string, optional): Search term for filtering blogs.
Response:
{
"success": true,
"data": {
"data": [...],
"total": 0,
"page": 1,
"limit": 10
}
}
4.2 POST /api/blogs/
Description: Creates a new blog post (authentication required).
Headers:
Confidential
IntelliDelve API Testing Guide Page 4
• Authorization: Bearer <access_token>
Body (JSON):
{
"title": "Sample Blog",
"content": "<p>HTML content</p>",
"excerpt": "short preview",
"author": "Admin",
"status": "published",
"tags": ["tag1", "tag2"],
"category": "Tech"
}
4.3 GET /api/blogs/{uuid}/
Description: Returns a single blog post by UUID.
4.4 PUT /api/blogs/{uuid}/
Description: Updates blog details for example from draft to published (authentication re￾quired).
4.5 DELETE /api/blogs/{uuid}/
Description: Deletes a blog post (authentication required).
5 Case Study Endpoints
These endpoints manage case studies in the IntelliDelve API.
5.1 GET /api/case-studies/
Description: Lists all case studies.
5.2 POST /api/case-studies/
Description: Creates a new case study (authentication required).
Body (JSON):
{
"title": "Title",
"client": "Client Name",
"industry": "Retail",
"challenge": "...",
"solution": "...",
"results": "...",
"status": "published",
"tags": ["AI", "ML"],
"testimonial": {
"quote": "Amazing!",
"author": "CEO",
"position": "CTO"
},
"metrics": [
{"metric": "CTR", "label": "Click Rate", "improvement": "30%"}
]
Confidential
IntelliDelve API Testing Guide Page 5
}
5.3 GET/PUT/DELETE /api/case-studies/{uuid}/
Description: Retrieve, update, or delete a case study by UUID.
6 Features of the Current Setup
Following are the current features of the server-side setup that make it production-level:
• JWT Authentication: 24-hour lifetime with token rotation and refresh.
• CSRF and Session Security: Secured cookies.
• Password Hashing: Argon2 and PBKDF2 algorithms.
• Rate Limiting: Implemented via cache. Can be enhanced with Redis as needed.
• Exception Handling: Consistent API error schema.
• Security Hardening: CSP, XSS, and CORS protections.
• Caching: View-level caching (300 seconds).
• Email Backend: Gmail SMTP.
• Logging: Logs are set up for monitoring and detecting bugs quickly.
• REST Features: Built-in pagination, filtering, and ordering.
7 Testing Tips in Postman Web
Maximize your testing efficiency with these tips.
• Always set your Bearer Token in the Authorization header.
• Use raw JSON for POST request bodies.
• Test pagination with query parameters like ?page=2.
• Monitor response times and headers for performance insights.
• Test invalid inputs to verify validation mechanisms.
• Use Postman Web’s console logs (accessible via the ”Console” button) for debugging.
Confidential